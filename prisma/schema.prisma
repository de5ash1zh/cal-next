// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  bio           String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  eventTypes    EventType[]
  bookings      Booking[]
  availability  Availability[]
  blockedTimes BlockedTime[]
  customFields  CustomField[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EventType {
  id          String   @id @default(cuid())
  title       String
  slug        String
  description String?
  duration    Int      // in minutes
  price       Float?   @default(0)
  isActive    Boolean  @default(true)
  color       String   @default("#6b7280")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Meeting links
  zoomMeeting    Boolean @default(false)
  googleMeet     Boolean @default(false)
  zoomUrl        String?
  googleMeetUrl  String?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  availability Availability[]
  customFields CustomField[]

  @@unique([userId, slug])
}

model Availability {
  id          String   @id @default(cuid())
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:mm format
  endTime     String   // HH:mm format
  userId      String
  eventTypeId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType EventType? @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek, startTime, endTime, eventTypeId])
}

model BlockedTime {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  reason    String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomField {
  id          String   @id @default(cuid())
  name        String
  type        CustomFieldType
  required    Boolean  @default(false)
  options     String?  // JSON string for select/radio fields
  order       Int      @default(0)
  eventTypeId String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventType EventType? @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  values    CustomFieldValue[]
}

model CustomFieldValue {
  id            String      @id @default(cuid())
  value         String
  customFieldId String
  bookingId     String
  createdAt     DateTime    @default(now())

  customField CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  booking     Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(CONFIRMED)
  attendeeName String
  attendeeEmail String
  attendeePhone String?
  notes       String?
  eventTypeId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Meeting links
  zoomUrl       String?
  googleMeetUrl String?

  eventType EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customFieldValues CustomFieldValue[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  SELECT
  RADIO
  CHECKBOX
  NUMBER
  EMAIL
  PHONE
  DATE
  TIME
}
